#include <iostream>
using namespace std;
class A
{
    string str;
    public:
    A(){}
    A(string str)
    {
        this->str=str;
    }
    void print()
    {
        cout<<str<<endl;
    }
};
class B
{
    A obj;
    public:
    B(A obj) //  using copy constructor which is synthesized by complier for class A
    {
        this->obj=obj;  //using operator= which is overloaded automatically by complier
    }
    void print()
    {
        obj.print();
    }
};
int main()
{
    A obj1("hello");
    B obj2(obj1);
    B obj3=obj2; // using copy constructor which is synthesized by complier for class B
    obj3.print();
    return 0;
}
